// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	"context"
	"sync"
)

// Ensure, that LoaderMock does implement Loader.
// If this is not the case, regenerate this file with moq.
var _ Loader = &LoaderMock{}

// LoaderMock is a mock implementation of Loader.
//
//	func TestSomethingThatUsesLoader(t *testing.T) {
//
//		// make and configure a mocked Loader
//		mockedLoader := &LoaderMock{
//			RunFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Run method")
//			},
//			ShutdownFunc: func(contextMoqParam context.Context)  {
//				panic("mock out the Shutdown method")
//			},
//		}
//
//		// use mockedLoader in code that requires Loader
//		// and then make assertions.
//
//	}
type LoaderMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(contextMoqParam context.Context) error

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(contextMoqParam context.Context)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockRun      sync.RWMutex
	lockShutdown sync.RWMutex
}

// Run calls RunFunc.
func (mock *LoaderMock) Run(contextMoqParam context.Context) error {
	if mock.RunFunc == nil {
		panic("LoaderMock.RunFunc: method is nil but Loader.Run was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(contextMoqParam)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedLoader.RunCalls())
func (mock *LoaderMock) RunCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *LoaderMock) Shutdown(contextMoqParam context.Context) {
	if mock.ShutdownFunc == nil {
		panic("LoaderMock.ShutdownFunc: method is nil but Loader.Shutdown was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	mock.ShutdownFunc(contextMoqParam)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedLoader.ShutdownCalls())
func (mock *LoaderMock) ShutdownCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}
