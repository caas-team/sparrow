// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package checks

import (
	"sync"
)

// Ensure, that RuntimeMock does implement Runtime.
// If this is not the case, regenerate this file with moq.
var _ Runtime = &RuntimeMock{}

// RuntimeMock is a mock implementation of Runtime.
//
//	func TestSomethingThatUsesRuntime(t *testing.T) {
//
//		// make and configure a mocked Runtime
//		mockedRuntime := &RuntimeMock{
//			ForFunc: func() string {
//				panic("mock out the For method")
//			},
//			ValidateFunc: func() error {
//				panic("mock out the Validate method")
//			},
//		}
//
//		// use mockedRuntime in code that requires Runtime
//		// and then make assertions.
//
//	}
type RuntimeMock struct {
	// ForFunc mocks the For method.
	ForFunc func() string

	// ValidateFunc mocks the Validate method.
	ValidateFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// For holds details about calls to the For method.
		For []struct {
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
		}
	}
	lockFor      sync.RWMutex
	lockValidate sync.RWMutex
}

// For calls ForFunc.
func (mock *RuntimeMock) For() string {
	if mock.ForFunc == nil {
		panic("RuntimeMock.ForFunc: method is nil but Runtime.For was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFor.Lock()
	mock.calls.For = append(mock.calls.For, callInfo)
	mock.lockFor.Unlock()
	return mock.ForFunc()
}

// ForCalls gets all the calls that were made to For.
// Check the length with:
//
//	len(mockedRuntime.ForCalls())
func (mock *RuntimeMock) ForCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFor.RLock()
	calls = mock.calls.For
	mock.lockFor.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *RuntimeMock) Validate() error {
	if mock.ValidateFunc == nil {
		panic("RuntimeMock.ValidateFunc: method is nil but Runtime.Validate was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc()
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//
//	len(mockedRuntime.ValidateCalls())
func (mock *RuntimeMock) ValidateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
