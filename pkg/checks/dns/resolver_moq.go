// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dns

import (
	"context"
	"net"
	"sync"
)

// Ensure, that ResolverMock does implement Resolver.
// If this is not the case, regenerate this file with moq.
var _ Resolver = &ResolverMock{}

// ResolverMock is a mock implementation of Resolver.
//
//	func TestSomethingThatUsesResolver(t *testing.T) {
//
//		// make and configure a mocked Resolver
//		mockedResolver := &ResolverMock{
//			LookupAddrFunc: func(ctx context.Context, addr string) ([]string, error) {
//				panic("mock out the LookupAddr method")
//			},
//			LookupHostFunc: func(ctx context.Context, addr string) ([]string, error) {
//				panic("mock out the LookupHost method")
//			},
//			SetDialerFunc: func(d *net.Dialer)  {
//				panic("mock out the SetDialer method")
//			},
//		}
//
//		// use mockedResolver in code that requires Resolver
//		// and then make assertions.
//
//	}
type ResolverMock struct {
	// LookupAddrFunc mocks the LookupAddr method.
	LookupAddrFunc func(ctx context.Context, addr string) ([]string, error)

	// LookupHostFunc mocks the LookupHost method.
	LookupHostFunc func(ctx context.Context, addr string) ([]string, error)

	// SetDialerFunc mocks the SetDialer method.
	SetDialerFunc func(d *net.Dialer)

	// calls tracks calls to the methods.
	calls struct {
		// LookupAddr holds details about calls to the LookupAddr method.
		LookupAddr []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Addr is the addr argument value.
			Addr string
		}
		// LookupHost holds details about calls to the LookupHost method.
		LookupHost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Addr is the addr argument value.
			Addr string
		}
		// SetDialer holds details about calls to the SetDialer method.
		SetDialer []struct {
			// D is the d argument value.
			D *net.Dialer
		}
	}
	lockLookupAddr sync.RWMutex
	lockLookupHost sync.RWMutex
	lockSetDialer  sync.RWMutex
}

// LookupAddr calls LookupAddrFunc.
func (mock *ResolverMock) LookupAddr(ctx context.Context, addr string) ([]string, error) {
	if mock.LookupAddrFunc == nil {
		panic("ResolverMock.LookupAddrFunc: method is nil but Resolver.LookupAddr was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Addr string
	}{
		Ctx:  ctx,
		Addr: addr,
	}
	mock.lockLookupAddr.Lock()
	mock.calls.LookupAddr = append(mock.calls.LookupAddr, callInfo)
	mock.lockLookupAddr.Unlock()
	return mock.LookupAddrFunc(ctx, addr)
}

// LookupAddrCalls gets all the calls that were made to LookupAddr.
// Check the length with:
//
//	len(mockedResolver.LookupAddrCalls())
func (mock *ResolverMock) LookupAddrCalls() []struct {
	Ctx  context.Context
	Addr string
} {
	var calls []struct {
		Ctx  context.Context
		Addr string
	}
	mock.lockLookupAddr.RLock()
	calls = mock.calls.LookupAddr
	mock.lockLookupAddr.RUnlock()
	return calls
}

// LookupHost calls LookupHostFunc.
func (mock *ResolverMock) LookupHost(ctx context.Context, addr string) ([]string, error) {
	if mock.LookupHostFunc == nil {
		panic("ResolverMock.LookupHostFunc: method is nil but Resolver.LookupHost was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Addr string
	}{
		Ctx:  ctx,
		Addr: addr,
	}
	mock.lockLookupHost.Lock()
	mock.calls.LookupHost = append(mock.calls.LookupHost, callInfo)
	mock.lockLookupHost.Unlock()
	return mock.LookupHostFunc(ctx, addr)
}

// LookupHostCalls gets all the calls that were made to LookupHost.
// Check the length with:
//
//	len(mockedResolver.LookupHostCalls())
func (mock *ResolverMock) LookupHostCalls() []struct {
	Ctx  context.Context
	Addr string
} {
	var calls []struct {
		Ctx  context.Context
		Addr string
	}
	mock.lockLookupHost.RLock()
	calls = mock.calls.LookupHost
	mock.lockLookupHost.RUnlock()
	return calls
}

// SetDialer calls SetDialerFunc.
func (mock *ResolverMock) SetDialer(d *net.Dialer) {
	if mock.SetDialerFunc == nil {
		panic("ResolverMock.SetDialerFunc: method is nil but Resolver.SetDialer was just called")
	}
	callInfo := struct {
		D *net.Dialer
	}{
		D: d,
	}
	mock.lockSetDialer.Lock()
	mock.calls.SetDialer = append(mock.calls.SetDialer, callInfo)
	mock.lockSetDialer.Unlock()
	mock.SetDialerFunc(d)
}

// SetDialerCalls gets all the calls that were made to SetDialer.
// Check the length with:
//
//	len(mockedResolver.SetDialerCalls())
func (mock *ResolverMock) SetDialerCalls() []struct {
	D *net.Dialer
} {
	var calls []struct {
		D *net.Dialer
	}
	mock.lockSetDialer.RLock()
	calls = mock.calls.SetDialer
	mock.lockSetDialer.RUnlock()
	return calls
}
