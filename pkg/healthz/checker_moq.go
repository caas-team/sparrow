// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package healthz

import (
	"context"
	"github.com/caas-team/sparrow/pkg/checks"
	"sync"
)

// Ensure, that CheckerMock does implement Checker.
// If this is not the case, regenerate this file with moq.
var _ Checker = &CheckerMock{}

// CheckerMock is a mock implementation of Checker.
//
//	func TestSomethingThatUsesChecker(t *testing.T) {
//
//		// make and configure a mocked Checker
//		mockedChecker := &CheckerMock{
//			CheckOverallHealthFunc: func(ctx context.Context, cks []checks.Check) bool {
//				panic("mock out the CheckOverallHealth method")
//			},
//		}
//
//		// use mockedChecker in code that requires Checker
//		// and then make assertions.
//
//	}
type CheckerMock struct {
	// CheckOverallHealthFunc mocks the CheckOverallHealth method.
	CheckOverallHealthFunc func(ctx context.Context, cks []checks.Check) bool

	// calls tracks calls to the methods.
	calls struct {
		// CheckOverallHealth holds details about calls to the CheckOverallHealth method.
		CheckOverallHealth []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cks is the cks argument value.
			Cks []checks.Check
		}
	}
	lockCheckOverallHealth sync.RWMutex
}

// CheckOverallHealth calls CheckOverallHealthFunc.
func (mock *CheckerMock) CheckOverallHealth(ctx context.Context, cks []checks.Check) bool {
	if mock.CheckOverallHealthFunc == nil {
		panic("CheckerMock.CheckOverallHealthFunc: method is nil but Checker.CheckOverallHealth was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cks []checks.Check
	}{
		Ctx: ctx,
		Cks: cks,
	}
	mock.lockCheckOverallHealth.Lock()
	mock.calls.CheckOverallHealth = append(mock.calls.CheckOverallHealth, callInfo)
	mock.lockCheckOverallHealth.Unlock()
	return mock.CheckOverallHealthFunc(ctx, cks)
}

// CheckOverallHealthCalls gets all the calls that were made to CheckOverallHealth.
// Check the length with:
//
//	len(mockedChecker.CheckOverallHealthCalls())
func (mock *CheckerMock) CheckOverallHealthCalls() []struct {
	Ctx context.Context
	Cks []checks.Check
} {
	var calls []struct {
		Ctx context.Context
		Cks []checks.Check
	}
	mock.lockCheckOverallHealth.RLock()
	calls = mock.calls.CheckOverallHealth
	mock.lockCheckOverallHealth.RUnlock()
	return calls
}
